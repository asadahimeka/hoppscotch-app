import { fetch, Body, ResponseType, Part, FilePart } from "@tauri-apps/api/http"

// // fetch response structure
// // https://developer.mozilla.org/en-US/docs/Web/API/Response
// // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
// {
//   body: ReadableStream
//   bodyUsed: false
//   headers: Headers {}
//   ok: true
//   redirected: false
//   status: 200
//   statusText: ""
//   type: "cors"
//   url: "http://localhost:8080/hello"
// }
//
// // axios response structure
// // https://github.com/axios/axios#response-schema
// export interface AxiosResponse<T = any, D = any>  {
//   data: T;
//   status: number;
//   statusText: string;
//   headers: AxiosResponseHeaders;
//   config: AxiosRequestConfig<D>;
//   request?: any;
// }
// {
//   // `data` is the response that was provided by the server
//   data: {},
//   // `status` is the HTTP status code from the server response
//   status: 200,
//   // `statusText` is the HTTP status message from the server response
//   statusText: 'OK',
//   // `headers` the HTTP headers that the server responded with
//   // All header names are lower cased and can be accessed using the bracket notation.
//   // Example: `response.headers['content-type']`
//   headers: {},
//   // `config` is the config that was provided to `axios` for the request
//   config: {},
//   // `request` is the request that generated this response
//   // It is the last ClientRequest instance in node.js (in redirects)
//   // and an XMLHttpRequest instance in the browser
//   request: {}
// }
//
// // window.__TAURI__.http.fetch response structure
// class Response<T> {
//   /** The request URL. */
//   url: string
//   /** The response status code. */
//   status: number
//   /** A boolean indicating whether the response was successful (status in the range 200â€“299) or not. */
//   ok: boolean
//   /** The response headers. */
//   headers: Record<string, string>
//   /** The response data. */
//   data: T
// }
declare global {
  interface Window {
    __TAURI__?: any,
    __POSTWOMAN_EXTENSION_HOOK__?: any
  }
}
console.info(`executing extension strategy`)
if (window.__TAURI__ && window.__TAURI__.http) {
  console.info(`injected tauri extension strategy`)
  window.__POSTWOMAN_EXTENSION_HOOK__ = {
    sendRequest: async ({
      url,
      method,
      headers,
      params,
      data,
    }: any): Promise<NetworkResponse> => {
      try {
        // https://github.com/tauri-apps/tauri/blob/next/tooling/api/src/http.ts
        // 1: JSON, 2: Text, 3: Binary
        // set the default body to null, responseType to binary
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
        let body
        let responseType = ResponseType.Binary
        const contentType: string =
          headers["content-type"] || headers["Content-Type"] || "text/plain"
        // set body if data is not null
        if (contentType.includes("json")) {
          responseType = ResponseType.JSON
          data && (body = Body.json(JSON.parse(data)))
        } else if (contentType.includes("form")) {
          responseType = ResponseType.Text
          // https://github.com/tauri-apps/tauri/blob/dev/tooling/api/src/http.ts#L128
          // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsArrayBuffer
          data && (body = Body.form(await normalizeFormData(data)))
        } else if (contentType.includes("text")) {
          responseType = ResponseType.Text
          data && (body = Body.text(data))
        } else {
          responseType = ResponseType.Binary
          data && (body = Body.bytes(data))
        }
        const tauriFetchRes = await fetch<string | object | ArrayBuffer>(url, {
          method,
          headers,
          query: params,
          body,
          responseType,
        })
        console.info(`tauri fetch response`, tauriFetchRes)
        const result =
          typeof tauriFetchRes.data === "object"
            ? JSON.stringify(tauriFetchRes.data)
            : tauriFetchRes.data
        return {
          ...tauriFetchRes,
          data: new TextEncoder().encode(result),
          statusText: "ok",
          config: {},
        }
      } catch (error) {
        console.info(`tauri fetch got error: `, error)
        return {
          status: 500,
          headers: {},
          data: new TextEncoder().encode(`tauri fetch got error: ${error}`),
          statusText: "",
          config: {},
        }
      }
    },
    getVersion: () => ({ major: 0, minor: 1, patch: 0 }),
  }
}

async function readFile(file: File): Promise<[Uint8Array, string, string]> {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.onload = () =>
      resolve([
        new Uint8Array(reader.result as ArrayBuffer),
        file.type,
        file.name,
      ])
    reader.onerror = reject
    reader.readAsArrayBuffer(file)
  })
}

async function normalizeFormData(
  data: any
): Promise<Record<string, string | Part>> {
  // https://melvingeorge.me/blog/convert-html-form-tag-input-values-to-object-javascript
  const formDataObject = Object.fromEntries(data.entries())
  const normalizedFormData: Record<string, string | Part> = {}
  for (const [key, value] of Object.entries(formDataObject)) {
    if (value instanceof File) {
      const [file, mime, fileName] = await readFile(value)
      const filePart: FilePart<Uint8Array> = { file, mime, fileName }
      normalizedFormData[key] = filePart
    } else {
      normalizedFormData[key] = value
    }
  }
  return normalizedFormData
}
